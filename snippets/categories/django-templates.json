{
    "django_block": {
        "prefix": "adblock",
        "body": [
            "{% block ${1:content} %}",
            "\t${0}",
            "{% endblock %}"
        ],
        "description": "Django template block",
        "scope": "text.html.django"
    },
    "django_static": {
        "prefix": "adstatic",
        "body": "{% static '${1:path/to/file}' %}",
        "description": "Django static file reference",
        "scope": "text.html.django"
    },
    "django_forloop": {
        "prefix": "adfor",
        "body": [
            "{% for ${1:item} in ${2:list} %}",
            "\t${0}",
            "{% endfor %}"
        ],
        "description": "Django for loop template tag",
        "scope": "text.html.django"
    },
    "django_if": {
        "prefix": "adif",
        "body": [
            "{% if ${1:condition} %}",
            "\t${2}",
            "{% else %}",
            "\t${3}",
            "{% endif %}"
        ],
        "description": "Django if-else template tag",
        "scope": "text.html.django"
    },
    "django_include": {
        "prefix": "adinclude",
        "body": "{% include '${1:template_name.html}' %}",
        "description": "Django include template tag",
        "scope": "text.html.django"
    },
    "django_url": {
        "prefix": "adurl",
        "body": "{% url '${1:url_name}' %}",
        "description": "Django URL template tag",
        "scope": "text.html.django"
    },
    "django_extends": {
        "prefix": "adextends",
        "body": "{% extends '${1:base.html}' %}",
        "description": "Django extends template tag",
        "scope": "text.html.django"
    },
    "django_csrf": {
        "prefix": "adcsrf",
        "body": "{% csrf_token %}",
        "description": "Django CSRF token tag",
        "scope": "text.html.django"
    },
    "django_load": {
        "prefix": "adload",
        "body": "{% load ${1:static} %}",
        "description": "Django load template tag",
        "scope": "text.html.django"
    },
    "django_comment": {
        "prefix": "adcomment",
        "body": "{% comment %}${1:comment text}{% endcomment %}",
        "description": "Django comment tag",
        "scope": "text.html.django"
    },
    "django_with": {
        "prefix": "adwith",
        "body": [
            "{% with ${1:variable}=${2:value} %}",
            "\t${3:content}",
            "{% endwith %}"
        ],
        "description": "Django with template tag",
        "scope": "text.html.django"
    },
    "django_filter": {
        "prefix": "adfilter",
        "body": "{{ ${1:variable}|${2:filter}:${3:parameter} }}",
        "description": "Django filter syntax",
        "scope": "text.html.django"
    },
    "django_python_view": {
        "prefix": "adpview",
        "body": [
            "from django.shortcuts import render, HttpResponse",
            "from django.views.generic import ${1:TemplateView}",
            "",
            "def ${2:view_name}(request):",
            "\treturn render(request, '${3:template.html}', {",
            "\t\t'${4:context_variable}': ${5:value}",
            "\t})"
        ],
        "description": "Django view function",
        "scope": "python"
    },
    "django_python_model": {
        "prefix": "adpmodel",
        "body": [
            "from django.db import models",
            "",
            "class ${1:ModelName}(models.Model):",
            "\t${2:field_name} = models.${3:CharField}(${4:max_length=100})",
            "",
            "\tdef __str__(self):",
            "\t\treturn self.${2:field_name}",
            "",
            "\tclass Meta:",
            "\t\tverbose_name = '${5:Model Name}'",
            "\t\tverbose_name_plural = '${6:Model Names}'"
        ],
        "description": "Django model class",
        "scope": "python"
    },
    "django_python_form": {
        "prefix": "adpform",
        "body": [
            "from django import forms",
            "from .models import ${1:ModelName}",
            "",
            "class ${2:FormName}(forms.${3:ModelForm}):",
            "\tclass Meta:",
            "\t\tmodel = ${1:ModelName}",
            "\t\tfields = ['${4:field1}', '${5:field2}']",
            "\t\twidgets = {",
            "\t\t\t'${4:field1}': forms.${6:TextInput}(attrs={'class': 'form-control'})",
            "\t\t}"
        ],
        "description": "Django form class",
        "scope": "python"
    },
    "django_python_admin": {
        "prefix": "adpadmin",
        "body": [
            "from django.contrib import admin",
            "from .models import ${1:ModelName}",
            "",
            "@admin.register(${1:ModelName})",
            "class ${1:ModelName}Admin(admin.ModelAdmin):",
            "\tlist_display = ('${2:field1}', '${3:field2}')",
            "\tlist_filter = ('${4:field1}',)",
            "\tsearch_fields = ('${5:field1}',)"
        ],
        "description": "Django admin class",
        "scope": "python"
    },
    "django_python_urls": {
        "prefix": "adpurls",
        "body": [
            "from django.urls import path",
            "from . import views",
            "",
            "app_name = '${1:app_name}'",
            "",
            "urlpatterns = [",
            "\tpath('${2:path}/', views.${3:view_name}, name='${4:url_name}'),",
            "]"
        ],
        "description": "Django URLs configuration",
        "scope": "python"
    },
    "django_template_filters": {
        "prefix": "adfilters",
        "body": [
            "{% load static %}",
            "{% load humanize %}",
            "{% load i18n %}",
            "{% load crispy_forms_tags %}"
        ],
        "description": "Common Django template filters",
        "scope": "text.html.django"
    },
    "django_form_template": {
        "prefix": "adform",
        "body": [
            "<form method=\"post\" class=\"${1:form}\">",
            "\t{% csrf_token %}",
            "\t{{ form|crispy }}",
            "\t<button type=\"submit\" class=\"btn btn-primary\">${2:Submit}</button>",
            "</form>"
        ],
        "description": "Django form template with crispy forms",
        "scope": "text.html.django"
    },
    "django_messages": {
        "prefix": "admessages",
        "body": [
            "{% if messages %}",
            "<div class=\"messages\">",
            "\t{% for message in messages %}",
            "\t<div class=\"alert alert-{{ message.tags }}\">",
            "\t\t{{ message }}",
            "\t</div>",
            "\t{% endfor %}",
            "</div>",
            "{% endif %}"
        ],
        "description": "Django messages framework template",
        "scope": "text.html.django"
    },
    "django_pagination": {
        "prefix": "adpagination",
        "body": [
            "{% if is_paginated %}",
            "<nav aria-label=\"Page navigation\">",
            "\t<ul class=\"pagination justify-content-center\">",
            "\t\t{% if page_obj.has_previous %}",
            "\t\t<li class=\"page-item\">",
            "\t\t\t<a class=\"page-link\" href=\"?page={{ page_obj.previous_page_number }}\">&laquo; Previous</a>",
            "\t\t</li>",
            "\t\t{% endif %}",
            "\t\t{% for num in page_obj.paginator.page_range %}",
            "\t\t<li class=\"page-item {% if page_obj.number == num %}active{% endif %}\">",
            "\t\t\t<a class=\"page-link\" href=\"?page={{ num }}\">{{ num }}</a>",
            "\t\t</li>",
            "\t\t{% endfor %}",
            "\t\t{% if page_obj.has_next %}",
            "\t\t<li class=\"page-item\">",
            "\t\t\t<a class=\"page-link\" href=\"?page={{ page_obj.next_page_number }}\">Next &raquo;</a>",
            "\t\t</li>",
            "\t\t{% endif %}",
            "\t</ul>",
            "</nav>",
            "{% endif %}"
        ],
        "description": "Django pagination template with Bootstrap",
        "scope": "text.html.django"
    },
    "django_navbar": {
        "prefix": "adnav",
        "body": [
            "<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">",
            "\t<div class=\"container\">",
            "\t\t<a class=\"navbar-brand\" href=\"{% url 'home' %}\">{{ site_name }}</a>",
            "\t\t<button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\">",
            "\t\t\t<span class=\"navbar-toggler-icon\"></span>",
            "\t\t</button>",
            "\t\t<div class=\"collapse navbar-collapse\" id=\"navbarNav\">",
            "\t\t\t<ul class=\"navbar-nav\">",
            "\t\t\t\t<li class=\"nav-item\">",
            "\t\t\t\t\t<a class=\"nav-link {% if request.resolver_match.url_name == 'home' %}active{% endif %}\" href=\"{% url 'home' %}\">Home</a>",
            "\t\t\t\t</li>",
            "\t\t\t</ul>",
            "\t\t\t{% if user.is_authenticated %}",
            "\t\t\t<ul class=\"navbar-nav ms-auto\">",
            "\t\t\t\t<li class=\"nav-item dropdown\">",
            "\t\t\t\t\t<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userDropdown\" role=\"button\" data-bs-toggle=\"dropdown\">",
            "\t\t\t\t\t\t{{ user.username }}",
            "\t\t\t\t\t</a>",
            "\t\t\t\t\t<ul class=\"dropdown-menu dropdown-menu-end\">",
            "\t\t\t\t\t\t<li><a class=\"dropdown-item\" href=\"{% url 'profile' %}\">Profile</a></li>",
            "\t\t\t\t\t\t<li><hr class=\"dropdown-divider\"></li>",
            "\t\t\t\t\t\t<li><a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a></li>",
            "\t\t\t\t\t</ul>",
            "\t\t\t\t</li>",
            "\t\t\t</ul>",
            "\t\t\t{% else %}",
            "\t\t\t<ul class=\"navbar-nav ms-auto\">",
            "\t\t\t\t<li class=\"nav-item\">",
            "\t\t\t\t\t<a class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>",
            "\t\t\t\t</li>",
            "\t\t\t\t<li class=\"nav-item\">",
            "\t\t\t\t\t<a class=\"nav-link\" href=\"{% url 'register' %}\">Register</a>",
            "\t\t\t\t</li>",
            "\t\t\t</ul>",
            "\t\t\t{% endif %}",
            "\t\t</div>",
            "\t</div>",
            "</nav>"
        ],
        "description": "Django navigation bar with Bootstrap and authentication",
        "scope": "text.html.django"
    },
    "django_python_class_view": {
        "prefix": "adpclass",
        "body": [
            "from django.views.generic import ${1:ListView}",
            "from django.contrib.auth.mixins import LoginRequiredMixin",
            "from .models import ${2:Model}",
            "",
            "class ${3:ViewName}(LoginRequiredMixin, ${1:ListView}):",
            "\tmodel = ${2:Model}",
            "\ttemplate_name = '${4:template.html}'",
            "\tcontext_object_name = '${5:objects}'",
            "\tpaginate_by = ${6:10}",
            "",
            "\tdef get_queryset(self):",
            "\t\treturn super().get_queryset().filter(user=self.request.user)",
            "",
            "\tdef get_context_data(self, **kwargs):",
            "\t\tcontext = super().get_context_data(**kwargs)",
            "\t\tcontext['title'] = '${7:Page Title}'",
            "\t\treturn context"
        ],
        "description": "Django class-based view",
        "scope": "python"
    },
    "django_python_api_view": {
        "prefix": "adpapi",
        "body": [
            "from rest_framework import viewsets",
            "from rest_framework.permissions import IsAuthenticated",
            "from .models import ${1:Model}",
            "from .serializers import ${2:ModelSerializer}",
            "",
            "class ${3:ViewName}ViewSet(viewsets.ModelViewSet):",
            "\tqueryset = ${1:Model}.objects.all()",
            "\tserializer_class = ${2:ModelSerializer}",
            "\tpermission_classes = [IsAuthenticated]",
            "",
            "\tdef get_queryset(self):",
            "\t\treturn ${1:Model}.objects.filter(user=self.request.user)",
            "",
            "\tdef perform_create(self, serializer):",
            "\t\tserializer.save(user=self.request.user)"
        ],
        "description": "Django REST framework ViewSet",
        "scope": "python"
    },
    "django_python_middleware": {
        "prefix": "adpmiddleware",
        "body": [
            "from django.utils.deprecation import MiddlewareMixin",
            "from django.http import HttpResponseRedirect",
            "from django.urls import reverse",
            "",
            "class ${1:CustomMiddleware}(MiddlewareMixin):",
            "\tdef process_request(self, request):",
            "\t\t${2:# Add your middleware logic here}",
            "\t\tpass",
            "",
            "\tdef process_response(self, request, response):",
            "\t\t${3:# Modify response if needed}",
            "\t\treturn response"
        ],
        "description": "Django middleware class",
        "scope": "python"
    },
    "django_python_signals": {
        "prefix": "adpsignals",
        "body": [
            "from django.db.models.signals import ${1:post_save}",
            "from django.dispatch import receiver",
            "from django.contrib.auth.models import User",
            "from .models import ${2:Profile}",
            "",
            "@receiver(${1:post_save}, sender=User)",
            "def create_user_profile(sender, instance, created, **kwargs):",
            "\tif created:",
            "\t\t${2:Profile}.objects.create(user=instance)",
            "",
            "@receiver(${1:post_save}, sender=User)",
            "def save_user_profile(sender, instance, **kwargs):",
            "\tinstance.profile.save()"
        ],
        "description": "Django signals for model",
        "scope": "python"
    },
    "django_python_command": {
        "prefix": "adpcommand",
        "body": [
            "from django.core.management.base import BaseCommand",
            "from django.utils import timezone",
            "from ${1:app_name}.models import ${2:Model}",
            "",
            "class Command(BaseCommand):",
            "\thelp = '${3:Command description}'",
            "",
            "\tdef add_arguments(self, parser):",
            "\t\tparser.add_argument('${4:argument}', type=${5:str}, help='${6:Argument help text}')",
            "",
            "\tdef handle(self, *args, **options):",
            "\t\t${7:# Command logic here}",
            "\t\tself.stdout.write(",
            "\t\t\tself.style.SUCCESS('Successfully executed command')",
            "\t\t)"
        ],
        "description": "Django management command",
        "scope": "python"
    },
    "django_python_auth_views": {
        "prefix": "adpauthviews",
        "body": [
            "from django.contrib.auth.views import (",
            "\tLoginView, LogoutView, PasswordChangeView,",
            "\tPasswordResetView, PasswordResetDoneView,",
            "\tPasswordResetConfirmView, PasswordResetCompleteView",
            ")",
            "from django.urls import reverse_lazy",
            "",
            "class CustomLoginView(LoginView):",
            "\ttemplate_name = 'registration/login.html'",
            "\tsuccess_url = reverse_lazy('home')",
            "",
            "class CustomPasswordChangeView(PasswordChangeView):",
            "\ttemplate_name = 'registration/password_change.html'",
            "\tsuccess_url = reverse_lazy('password_change_done')"
        ],
        "description": "Django authentication views",
        "scope": "python"
    },
    "django_python_tests": {
        "prefix": "adptests",
        "body": [
            "from django.test import TestCase, Client",
            "from django.urls import reverse",
            "from django.contrib.auth.models import User",
            "from .models import ${1:Model}",
            "",
            "class ${2:TestName}Tests(TestCase):",
            "\tdef setUp(self):",
            "\t\tself.client = Client()",
            "\t\tself.user = User.objects.create_user(",
            "\t\t\tusername='testuser',",
            "\t\t\temail='test@example.com',",
            "\t\t\tpassword='testpass123'",
            "\t\t)",
            "\t\tself.${3:object} = ${1:Model}.objects.create(",
            "\t\t\tuser=self.user,",
            "\t\t\t${4:field}='${5:value}'",
            "\t\t)",
            "",
            "\tdef test_view_url_exists_at_desired_location(self):",
            "\t\tresponse = self.client.get('/${6:url-path}/')",
            "\t\tself.assertEqual(response.status_code, 200)",
            "",
            "\tdef test_view_url_accessible_by_name(self):",
            "\t\tresponse = self.client.get(reverse('${7:url-name}'))",
            "\t\tself.assertEqual(response.status_code, 200)",
            "",
            "\tdef test_view_uses_correct_template(self):",
            "\t\tresponse = self.client.get(reverse('${7:url-name}'))",
            "\t\tself.assertEqual(response.status_code, 200)",
            "\t\tself.assertTemplateUsed(response, '${8:template.html}')"
        ],
        "description": "Django test class",
        "scope": "python"
    },
    "django_cycle": {
        "prefix": "adcycle",
        "body": "{% cycle '${1:first}' '${2:second}' '${3:third}' as ${4:cycle_name} %}",
        "description": "Django cycle template tag",
        "scope": "text.html.django"
    },
    "django_regroup": {
        "prefix": "adregroup",
        "body": [
            "{% regroup ${1:list} by ${2:field} as ${3:grouped_list} %}",
            "\t{% for group in ${3:grouped_list} %}",
            "\t\t<h3>{{ group.grouper }}</h3>",
            "\t\t<ul>",
            "\t\t\t{% for item in group.list %}",
            "\t\t\t\t<li>{{ item.${4:field} }}</li>",
            "\t\t\t{% endfor %}",
            "\t\t</ul>",
            "\t{% endfor %}"
        ],
        "description": "Django regroup template tag",
        "scope": "text.html.django"
    },
    "django_verbatim": {
        "prefix": "adverbatim",
        "body": [
            "{% verbatim %}",
            "\t${1:content}",
            "{% endverbatim %}"
        ],
        "description": "Django verbatim template tag",
        "scope": "text.html.django"
    },
    "django_spaceless": {
        "prefix": "adspaceless",
        "body": [
            "{% spaceless %}",
            "\t${1:content}",
            "{% endspaceless %}"
        ],
        "description": "Django spaceless template tag",
        "scope": "text.html.django"
    },
    "django_lorem": {
        "prefix": "adlorem",
        "body": "{% lorem ${1:3} p %}",
        "description": "Django lorem ipsum template tag",
        "scope": "text.html.django"
    },
    "django_now": {
        "prefix": "adnow",
        "body": "{% now \"${1:Y-m-d H:i:s}\" %}",
        "description": "Django now template tag",
        "scope": "text.html.django"
    },
    "django_python_serializer": {
        "prefix": "adpserializer",
        "body": [
            "from rest_framework import serializers",
            "from .models import ${1:Model}",
            "",
            "class ${2:Model}Serializer(serializers.ModelSerializer):",
            "\tclass Meta:",
            "\t\tmodel = ${1:Model}",
            "\t\tfields = ['${3:field1}', '${4:field2}']",
            "\t\tread_only_fields = ['${5:field1}']",
            "",
            "\tdef validate_${6:field}(self, value):",
            "\t\t${7:# Add custom validation}",
            "\t\treturn value"
        ],
        "description": "Django REST framework serializer",
        "scope": "python"
    },
    "django_python_permissions": {
        "prefix": "adppermissions",
        "body": [
            "from rest_framework import permissions",
            "",
            "class ${1:CustomPermission}(permissions.BasePermission):",
            "\tdef has_permission(self, request, view):",
            "\t\t${2:# Add permission logic}",
            "\t\treturn True",
            "",
            "\tdef has_object_permission(self, request, view, obj):",
            "\t\t${3:# Add object permission logic}",
            "\t\treturn True"
        ],
        "description": "Django REST framework custom permission",
        "scope": "python"
    },
    "django_python_throttling": {
        "prefix": "adpthrottling",
        "body": [
            "from rest_framework.throttling import UserRateThrottle",
            "",
            "class ${1:CustomThrottle(UserRateThrottle):",
            "\trate = '${2:100}/day'",
            "",
            "\tdef allow_request(self, request, view):",
            "\t\t${3:# Add custom throttling logic}",
            "\t\treturn True"
        ],
        "description": "Django REST framework throttling",
        "scope": "python"
    },
    "django_python_authentication": {
        "prefix": "adpauth",
        "body": [
            "from rest_framework.authentication import TokenAuthentication",
            "from rest_framework.permissions import IsAuthenticated",
            "from rest_framework.views import APIView",
            "",
            "class ${1:CustomAuthView}(APIView):",
            "\tauthentication_classes = [TokenAuthentication]",
            "\tpermission_classes = [IsAuthenticated]",
            "",
            "\tdef get(self, request):",
            "\t\t${2:# Add view logic}",
            "\t\treturn Response({'message': 'Success'})"
        ],
        "description": "Django REST framework authentication",
        "scope": "python"
    },
    "django_python_cache": {
        "prefix": "adpcache",
        "body": [
            "from django.core.cache import cache",
            "from django.views.decorators.cache import cache_page",
            "",
            "@cache_page(${1:60} * ${2:15})",
            "def ${3:view_name}(request):",
            "\t${4:# View logic}",
            "\treturn response",
            "",
            "# Cache usage example",
            "def cache_example():",
            "\t# Set cache",
            "\tcache.set('${5:key}', '${6:value}', ${7:timeout})",
            "\t# Get cache",
            "\tvalue = cache.get('${5:key}')",
            "\t# Delete cache",
            "\tcache.delete('${5:key}')"
        ],
        "description": "Django caching examples",
        "scope": "python"
    },
    "django_python_celery": {
        "prefix": "adpcelery",
        "body": [
            "from celery import shared_task",
            "from django.core.mail import send_mail",
            "",
            "@shared_task",
            "def ${1:task_name}(*args, **kwargs):",
            "\t${2:# Task logic}",
            "\treturn '${3:Task completed}'",
            "",
            "# Task usage example",
            "def trigger_task():",
            "\t${1:task_name}.delay(${4:arg1}, ${5:arg2})",
            "\t# Or with apply_async",
            "\t${1:task_name}.apply_async(",
            "\t\targs=[${4:arg1}, ${5:arg2}],",
            "\t\tcountdown=${6:60}",
            "\t)"
        ],
        "description": "Django Celery task example",
        "scope": "python"
    },
    "django_python_channels": {
        "prefix": "adpchannels",
        "body": [
            "from channels.generic.websocket import AsyncWebsocketConsumer",
            "import json",
            "",
            "class ${1:ConsumerName}(AsyncWebsocketConsumer):",
            "\tasync def connect(self):",
            "\t\tawait self.channel_layer.group_add(",
            "\t\t\t'${2:group_name}',",
            "\t\t\tself.channel_name",
            "\t\t)",
            "\t\tawait self.accept()",
            "",
            "\tasync def disconnect(self, close_code):",
            "\t\tawait self.channel_layer.group_discard(",
            "\t\t\t'${2:group_name}',",
            "\t\t\tself.channel_name",
            "\t\t)",
            "",
            "\tasync def receive(self, text_data):",
            "\t\ttext_data_json = json.loads(text_data)",
            "\t\tmessage = text_data_json['message']",
            "\t\tawait self.channel_layer.group_send(",
            "\t\t\t'${2:group_name}',",
            "\t\t\t{",
            "\t\t\t\t'type': '${3:message_type}',",
            "\t\t\t\t'message': message",
            "\t\t\t}",
            "\t\t)",
            "",
            "\tasync def ${3:message_type}(self, event):",
            "\t\tmessage = event['message']",
            "\t\tawait self.send(text_data=json.dumps({",
            "\t\t\t'message': message",
            "\t\t}))"
        ],
        "description": "Django Channels WebSocket consumer",
        "scope": "python"
    }
} 